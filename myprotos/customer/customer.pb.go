// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer.proto

/*
Package customer is a generated protocol buffer package.

It is generated from these files:
	customer.proto

It has these top-level messages:
	CustomerRequest
	CustomerResponse
	CustomerFilter
*/
package customer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new customer
type CustomerRequest struct {
	Id        int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email     string                     `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone     string                     `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Addresses []*CustomerRequest_Address `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *CustomerRequest) Reset()                    { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()               {}
func (*CustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CustomerRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomerRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CustomerRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CustomerRequest) GetAddresses() []*CustomerRequest_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CustomerRequest_Address struct {
	Street            string `protobuf:"bytes,1,opt,name=street" json:"street,omitempty"`
	City              string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State             string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Zip               string `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
	IsShippingAddress bool   `protobuf:"varint,5,opt,name=isShippingAddress" json:"isShippingAddress,omitempty"`
}

func (m *CustomerRequest_Address) Reset()                    { *m = CustomerRequest_Address{} }
func (m *CustomerRequest_Address) String() string            { return proto.CompactTextString(m) }
func (*CustomerRequest_Address) ProtoMessage()               {}
func (*CustomerRequest_Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *CustomerRequest_Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *CustomerRequest_Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CustomerRequest_Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CustomerRequest_Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *CustomerRequest_Address) GetIsShippingAddress() bool {
	if m != nil {
		return m.IsShippingAddress
	}
	return false
}

type CustomerResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *CustomerResponse) Reset()                    { *m = CustomerResponse{} }
func (m *CustomerResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomerResponse) ProtoMessage()               {}
func (*CustomerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CustomerResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CustomerFilter struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *CustomerFilter) Reset()                    { *m = CustomerFilter{} }
func (m *CustomerFilter) String() string            { return proto.CompactTextString(m) }
func (*CustomerFilter) ProtoMessage()               {}
func (*CustomerFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CustomerFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*CustomerRequest)(nil), "customer.CustomerRequest")
	proto.RegisterType((*CustomerRequest_Address)(nil), "customer.CustomerRequest.Address")
	proto.RegisterType((*CustomerResponse)(nil), "customer.CustomerResponse")
	proto.RegisterType((*CustomerFilter)(nil), "customer.CustomerFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Customer service

type CustomerClient interface {
	CreateCustomer(ctx context.Context, opts ...grpc.CallOption) (Customer_CreateCustomerClient, error)
}

type customerClient struct {
	cc *grpc.ClientConn
}

func NewCustomerClient(cc *grpc.ClientConn) CustomerClient {
	return &customerClient{cc}
}

func (c *customerClient) CreateCustomer(ctx context.Context, opts ...grpc.CallOption) (Customer_CreateCustomerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Customer_serviceDesc.Streams[0], c.cc, "/customer.Customer/CreateCustomer", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerCreateCustomerClient{stream}
	return x, nil
}

type Customer_CreateCustomerClient interface {
	Send(*CustomerRequest) error
	CloseAndRecv() (*CustomerResponse, error)
	grpc.ClientStream
}

type customerCreateCustomerClient struct {
	grpc.ClientStream
}

func (x *customerCreateCustomerClient) Send(m *CustomerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customerCreateCustomerClient) CloseAndRecv() (*CustomerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CustomerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Customer service

type CustomerServer interface {
	CreateCustomer(Customer_CreateCustomerServer) error
}

func RegisterCustomerServer(s *grpc.Server, srv CustomerServer) {
	s.RegisterService(&_Customer_serviceDesc, srv)
}

func _Customer_CreateCustomer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomerServer).CreateCustomer(&customerCreateCustomerServer{stream})
}

type Customer_CreateCustomerServer interface {
	SendAndClose(*CustomerResponse) error
	Recv() (*CustomerRequest, error)
	grpc.ServerStream
}

type customerCreateCustomerServer struct {
	grpc.ServerStream
}

func (x *customerCreateCustomerServer) SendAndClose(m *CustomerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customerCreateCustomerServer) Recv() (*CustomerRequest, error) {
	m := new(CustomerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Customer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.Customer",
	HandlerType: (*CustomerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCustomer",
			Handler:       _Customer_CreateCustomer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "customer.proto",
}

func init() { proto.RegisterFile("customer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0x87, 0xcd, 0xb6, 0xdb, 0x3f, 0x23, 0xac, 0x35, 0x88, 0xc4, 0x9e, 0xd6, 0x3d, 0x2d, 0x22,
	0x3d, 0xd4, 0xab, 0x20, 0x52, 0xf0, 0xe2, 0x2d, 0x1e, 0x3c, 0xaf, 0xbb, 0x83, 0x0d, 0xb6, 0x9b,
	0x98, 0xa4, 0x48, 0x7d, 0x05, 0x5f, 0xc6, 0x47, 0x94, 0x64, 0x93, 0x16, 0xac, 0xde, 0xe6, 0xfb,
	0x65, 0x92, 0xf9, 0x76, 0x58, 0xc8, 0xea, 0x8d, 0xb1, 0x72, 0x8d, 0x7a, 0xa6, 0xb4, 0xb4, 0x92,
	0x8e, 0x22, 0x17, 0xdf, 0x09, 0x9c, 0x2c, 0x02, 0x70, 0x7c, 0xdf, 0xa0, 0xb1, 0x34, 0x83, 0x44,
	0x34, 0x8c, 0xe4, 0xa4, 0x4c, 0x79, 0x22, 0x1a, 0x4a, 0xa1, 0xdf, 0x56, 0x6b, 0x64, 0x49, 0x4e,
	0xca, 0x31, 0xf7, 0x35, 0x3d, 0x83, 0x14, 0xd7, 0x95, 0x58, 0xb1, 0x9e, 0x0f, 0x3b, 0x70, 0xa9,
	0x5a, 0xca, 0x16, 0x59, 0xbf, 0x4b, 0x3d, 0xd0, 0x3b, 0x18, 0x57, 0x4d, 0xa3, 0xd1, 0x18, 0x34,
	0x2c, 0xcd, 0x7b, 0xe5, 0xf1, 0xfc, 0x72, 0xb6, 0x33, 0xfa, 0x35, 0x7d, 0x76, 0xdf, 0xb5, 0xf2,
	0xfd, 0x9d, 0xe9, 0x17, 0x81, 0x61, 0x88, 0xe9, 0x39, 0x0c, 0x8c, 0xd5, 0x88, 0xd6, 0x0b, 0x8e,
	0x79, 0x20, 0x27, 0x59, 0x0b, 0xbb, 0x8d, 0x92, 0xae, 0x76, 0x3a, 0xc6, 0x56, 0x16, 0xa3, 0xa4,
	0x07, 0x3a, 0x81, 0xde, 0xa7, 0x50, 0x41, 0xd1, 0x95, 0xf4, 0x1a, 0x4e, 0x85, 0x79, 0x5a, 0x0a,
	0xa5, 0x44, 0xfb, 0x1a, 0x06, 0xb1, 0x34, 0x27, 0xe5, 0x88, 0x1f, 0x1e, 0x14, 0xb7, 0x30, 0xd9,
	0x3b, 0x1b, 0x25, 0x5b, 0x83, 0x07, 0x2b, 0x63, 0x30, 0x34, 0x9b, 0xba, 0x76, 0xef, 0x24, 0xfe,
	0x9d, 0x88, 0xc5, 0x15, 0x64, 0xf1, 0xf6, 0x83, 0x58, 0x59, 0xd4, 0xae, 0xf7, 0x0d, 0xb7, 0x1f,
	0x52, 0x37, 0xe1, 0x93, 0x22, 0xce, 0x9f, 0x61, 0x14, 0x7b, 0xe9, 0x23, 0x64, 0x0b, 0x8d, 0x95,
	0xc5, 0x5d, 0x72, 0xf1, 0xef, 0x0e, 0xa7, 0xd3, 0xbf, 0x8e, 0x3a, 0xd5, 0xe2, 0xa8, 0x24, 0x2f,
	0x03, 0xff, 0x1b, 0xdc, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x20, 0x13, 0x51, 0x18, 0x02,
	0x00, 0x00,
}
